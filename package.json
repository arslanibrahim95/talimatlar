{
  "name": "claude-talimat",
  "version": "1.0.0",
  "description": "Claude Talimat İş Güvenliği Yönetim Sistemi",
  "type": "module",
  "scripts": {
    "dev": "concurrently \"npm run dev:frontend\" \"npm run dev:auth\" \"npm run dev:document\" \"npm run dev:analytics\" \"npm run dev:notification\"",
    "dev:frontend": "cd frontend && npm run dev",
    "dev:auth": "cd services/auth-service && deno task dev",
    "dev:document": "cd services/document-service && uvicorn main:app --reload --port 8002",
    "dev:analytics": "cd services/analytics-service && uvicorn main:app --reload --port 8003",
    "dev:notification": "cd services/notification-service && go run main.go",
    "dev:all": "docker-compose up -d && npm run dev:frontend",
    "build": "npm run build:frontend && npm run build:services",
    "build:frontend": "cd frontend && npm run build",
    "build:services": "docker-compose build",
    "start": "docker-compose up -d",
    "start:prod": "docker-compose -f docker-compose.prod.yml up -d",
    "stop": "docker-compose down",
    "stop:prod": "docker-compose -f docker-compose.prod.yml down",
    "restart": "npm run stop && npm run start",
    "restart:prod": "npm run stop:prod && npm run start:prod",
    "logs": "docker-compose logs -f",
    "logs:prod": "docker-compose -f docker-compose.prod.yml logs -f",
    "setup": "./infrastructure/scripts/setup.sh",
    "deploy:rpi": "./scripts/deploy-rpi.sh",
    "backup": "docker-compose -f docker-compose.prod.yml --profile backup run --rm backup",
    "test": "npm run test:frontend && npm run test:backend",
    "test:frontend": "cd frontend && npm run test",
    "test:backend": "npm run test:auth && npm run test:document && npm run test:analytics && npm run test:notification",
    "test:auth": "cd services/auth-service && deno test",
    "test:document": "cd services/document-service && python -m pytest",
    "test:analytics": "cd services/analytics-service && python -m pytest",
    "test:notification": "cd services/notification-service && go test ./...",
    "test:all": "npm run test:frontend && npm run test:backend",
    "lint": "npm run lint:frontend && npm run lint:backend",
    "lint:frontend": "cd frontend && npm run lint",
    "lint:backend": "npm run lint:auth && npm run lint:document && npm run lint:analytics && npm run lint:notification",
    "lint:auth": "cd services/auth-service && deno fmt --check && deno lint",
    "lint:document": "cd services/document-service && python -m black --check . && python -m flake8 .",
    "lint:analytics": "cd services/analytics-service && python -m black --check . && python -m flake8 .",
    "lint:notification": "cd services/notification-service && go vet ./... && golangci-lint run",
    "lint:fix": "npm run lint:fix:frontend && npm run lint:fix:backend",
    "lint:fix:frontend": "cd frontend && npm run lint:fix",
    "lint:fix:backend": "npm run lint:fix:auth && npm run lint:fix:document && npm run lint:fix:analytics && npm run lint:fix:notification",
    "lint:fix:auth": "cd services/auth-service && deno fmt . && deno lint --fix",
    "lint:fix:document": "cd services/document-service && python -m black . && python -m isort .",
    "lint:fix:analytics": "cd services/analytics-service && python -m black . && python -m isort .",
    "lint:fix:notification": "cd services/notification-service && go fmt ./...",
    "clean": "npm run clean:frontend && npm run clean:backend && npm run clean:docker",
    "clean:frontend": "cd frontend && rm -rf node_modules dist .vite",
    "clean:backend": "cd services && find . -type d -name __pycache__ -exec rm -rf {} + && find . -type f -name '*.pyc' -delete",
    "clean:docker": "docker-compose down -v --remove-orphans && docker system prune -f",
    "install": "npm run install:frontend && npm run install:backend",
    "install:frontend": "cd frontend && npm install",
    "install:backend": "npm run install:auth && npm run install:document && npm run install:analytics && npm run install:notification",
    "install:auth": "cd services/auth-service && deno cache --reload deno.json",
    "install:document": "cd services/document-service && pip install -r requirements.txt",
    "install:analytics": "cd services/analytics-service && pip install -r requirements.txt",
    "install:notification": "cd services/notification-service && go mod download",
    "update": "npm run update:frontend && npm run update:backend",
    "update:frontend": "cd frontend && npm update",
    "update:backend": "npm run update:auth && npm run update:document && npm run update:analytics && npm run update:notification",
    "update:auth": "cd services/auth-service && deno cache --reload deno.json",
    "update:document": "cd services/document-service && pip install -r requirements.txt --upgrade",
    "update:analytics": "cd services/analytics-service && pip install -r requirements.txt --upgrade",
    "update:notification": "cd services/notification-service && go get -u ./... && go mod tidy",
    "health": "curl -f http://localhost/health || echo 'Health check failed'",
    "status": "docker-compose ps",
    "status:prod": "docker-compose -f docker-compose.prod.yml ps",
    "shell:postgres": "docker-compose exec postgres psql -U safety_admin -d safety_production",
    "shell:redis": "docker-compose exec redis redis-cli",
    "shell:minio": "docker-compose exec minio mc",
    "logs:nginx": "docker-compose logs -f nginx",
    "logs:postgres": "docker-compose logs -f postgres",
    "logs:redis": "docker-compose logs -f redis",
    "logs:auth": "docker-compose logs -f auth-service",
    "logs:document": "docker-compose logs -f document-service",
    "logs:analytics": "docker-compose logs -f analytics-service",
    "logs:notification": "docker-compose logs -f notification-service"
  },
  "devDependencies": {
    "concurrently": "^8.2.2"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=9.0.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/arslanibrahim95/talimatlar.git"
  },
  "keywords": [
    "iş-güvenliği",
    "talimat",
    "yönetim-sistemi",
    "mikroservis",
    "raspberry-pi",
    "docker",
    "fastapi",
    "deno",
    "go",
    "react"
  ],
  "author": "İbrahim Arslan",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/arslanibrahim95/talimatlar/issues"
  },
  "homepage": "https://github.com/arslanibrahim95/talimatlar#readme"
}
