version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: claude-postgres-prod
    environment:
      POSTGRES_DB: safety_production
      POSTGRES_USER: safety_admin
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - claude-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U safety_admin -d safety_production"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: claude-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - claude-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # MeiliSearch
  meilisearch:
    image: getmeili/meilisearch:v1.6
    container_name: claude-meilisearch-prod
    environment:
      MEILI_MASTER_KEY: ${MEILISEARCH_KEY}
    volumes:
      - meilisearch_data:/meili_data
    ports:
      - "127.0.0.1:7700:7700"
    networks:
      - claude-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7700/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: claude-minio-prod
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    volumes:
      - minio_data:/data
    ports:
      - "127.0.0.1:9000:9000"
      - "127.0.0.1:9001:9001"
    networks:
      - claude-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.24-alpine
    container_name: claude-nginx-prod
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d
      - ./logs/nginx:/var/log/nginx
      - ./ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - auth-service
      - document-service
      - analytics-service
      - notification-service
    networks:
      - claude-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Auth Service (Deno + Oak)
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: claude-auth-prod
    environment:
      - DATABASE_URL=postgresql://safety_admin:${POSTGRES_PASSWORD}@postgres:5432/safety_production
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - PORT=8001
      - NODE_ENV=production
      - DEBUG=false
    ports:
      - "127.0.0.1:8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - claude-network
    volumes:
      - ./logs/auth:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Document Service (Python + FastAPI)
  document-service:
    build:
      context: ./services/document-service
      dockerfile: Dockerfile
      args:
        ENVIRONMENT: production
    container_name: claude-document-prod
    environment:
      - DATABASE_URL=postgresql://safety_admin:${POSTGRES_PASSWORD}@postgres:5432/safety_production
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - MEILISEARCH_URL=http://meilisearch:7700
      - MEILISEARCH_KEY=${MEILISEARCH_KEY}
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - PORT=8002
      - ENVIRONMENT=production
      - DEBUG=false
    ports:
      - "127.0.0.1:8002:8002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      meilisearch:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - claude-network
    volumes:
      - ./services/document-service/uploads:/app/uploads
      - ./logs/document:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Analytics Service (Python + FastAPI)
  analytics-service:
    build:
      context: ./services/analytics-service
      dockerfile: Dockerfile
      args:
        ENVIRONMENT: production
    container_name: claude-analytics-prod
    environment:
      - DATABASE_URL=postgresql://safety_admin:${POSTGRES_PASSWORD}@postgres:5432/safety_production
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - PORT=8003
      - ENVIRONMENT=production
      - DEBUG=false
    ports:
      - "127.0.0.1:8003:8003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - claude-network
    volumes:
      - ./logs/analytics:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Notification Service (Go + Gin)
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
      args:
        ENVIRONMENT: production
    container_name: claude-notification-prod
    environment:
      - DATABASE_URL=postgresql://safety_admin:${POSTGRES_PASSWORD}@postgres:5432/safety_production
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - PORT=8004
      - ENVIRONMENT=production
      - DEBUG=false
    ports:
      - "127.0.0.1:8004:8004"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - claude-network
    volumes:
      - ./logs/notification:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Frontend (Production Build)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        NODE_ENV: production
    container_name: claude-frontend-prod
    environment:
      - NODE_ENV=production
    ports:
      - "127.0.0.1:3000:3000"
    networks:
      - claude-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: claude-prometheus-prod
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "127.0.0.1:9090:9090"
    networks:
      - claude-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: claude-grafana-prod
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "127.0.0.1:3000:3000"
    networks:
      - claude-network
    depends_on:
      - prometheus
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: claude-backup-prod
    environment:
      - POSTGRES_DB=safety_production
      - POSTGRES_USER=safety_admin
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./infrastructure/scripts/backup.sh:/backup.sh
    command: ["/bin/sh", "-c", "chmod +x /backup.sh && /backup.sh"]
    depends_on:
      - postgres
    networks:
      - claude-network
    restart: "no"
    profiles:
      - backup

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  meilisearch_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  claude-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: claude-br0
