input {
  # Application logs
  file {
    path => "/var/log/claude-talimat/*.log"
    type => "claude-talimat"
    start_position => "beginning"
    codec => "json"
  }
  
  # Nginx logs
  file {
    path => "/var/log/nginx/*.log"
    type => "nginx"
    start_position => "beginning"
  }
  
  # System logs
  file {
    path => "/var/log/syslog"
    type => "system"
    start_position => "beginning"
  }
  
  # Docker logs
  beats {
    port => 5044
  }
}

filter {
  # Claude Talimat application logs
  if [type] == "claude-talimat" {
    if [message] =~ /^\{.*\}$/ {
      # JSON log format
      json {
        source => "message"
      }
    } else {
      # Plain text log format
      grok {
        match => { 
          "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} %{GREEDYDATA:message}" 
        }
      }
    }
    
    # Parse timestamp
    date {
      match => [ "timestamp", "ISO8601" ]
    }
    
    # Add service information
    mutate {
      add_field => { "service" => "claude-talimat" }
    }
  }
  
  # Nginx logs
  if [type] == "nginx" {
    grok {
      match => { 
        "message" => "%{NGINXACCESS}" 
      }
    }
    
    # Parse timestamp
    date {
      match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
    }
    
    # Convert response code to integer
    mutate {
      convert => { "response" => "integer" }
    }
    
    # Add service information
    mutate {
      add_field => { "service" => "nginx" }
    }
  }
  
  # System logs
  if [type] == "system" {
    grok {
      match => { 
        "message" => "%{SYSLOGTIMESTAMP:timestamp} %{IPORHOST:host} %{PROG:program}: %{GREEDYDATA:message}" 
      }
    }
    
    # Parse timestamp
    date {
      match => [ "timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
    
    # Add service information
    mutate {
      add_field => { "service" => "system" }
    }
  }
  
  # Common processing for all logs
  mutate {
    add_field => { "environment" => "production" }
    add_field => { "cluster" => "claude-talimat" }
  }
}

output {
  # Send to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "claude-talimat-logs-%{+YYYY.MM.dd}"
    template_name => "claude-talimat"
    template => "/usr/share/logstash/templates/claude-talimat-template.json"
    template_overwrite => true
  }
  
  # Debug output (remove in production)
  stdout {
    codec => rubydebug
  }
}