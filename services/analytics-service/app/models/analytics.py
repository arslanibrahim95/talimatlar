from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
from datetime import datetime
from enum import Enum

class MetricType(str, Enum):
    VIEWS = "views"
    DOWNLOADS = "downloads"
    UPLOADS = "uploads"
    USERS = "users"
    DOCUMENTS = "documents"
    COMPLIANCE = "compliance"

class TimePeriod(str, Enum):
    HOUR = "hour"
    DAY = "day"
    WEEK = "week"
    MONTH = "month"
    YEAR = "year"

class RiskLevel(str, Enum):
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"

class ComplianceStatus(str, Enum):
    COMPLIANT = "compliant"
    NON_COMPLIANT = "non_compliant"
    PENDING = "pending"
    EXPIRED = "expired"

# Dashboard Models
class DashboardMetric(BaseModel):
    name: str = Field(..., description="Metric name")
    value: float = Field(..., description="Metric value")
    unit: Optional[str] = Field(None, description="Unit of measurement")
    change_percent: Optional[float] = Field(None, description="Percentage change from previous period")
    trend: Optional[str] = Field(None, description="Trend direction (up, down, stable)")

class DashboardChart(BaseModel):
    title: str = Field(..., description="Chart title")
    type: str = Field(..., description="Chart type (line, bar, pie, etc.)")
    data: List[Dict[str, Any]] = Field(..., description="Chart data")
    options: Optional[Dict[str, Any]] = Field(None, description="Chart options")

class DashboardResponse(BaseModel):
    metrics: List[DashboardMetric] = Field(..., description="Dashboard metrics")
    charts: List[DashboardChart] = Field(..., description="Dashboard charts")
    recent_activity: List[Dict[str, Any]] = Field(..., description="Recent activity")
    alerts: List[Dict[str, Any]] = Field(..., description="System alerts")
    last_updated: datetime = Field(..., description="Last update timestamp")

# User Activity Models
class UserActivity(BaseModel):
    user_id: str = Field(..., description="User ID")
    user_name: str = Field(..., description="User name")
    action: str = Field(..., description="Action performed")
    resource: str = Field(..., description="Resource accessed")
    timestamp: datetime = Field(..., description="Activity timestamp")
    ip_address: Optional[str] = Field(None, description="IP address")
    session_duration: Optional[int] = Field(None, description="Session duration in seconds")

class UserActivityResponse(BaseModel):
    activities: List[UserActivity] = Field(..., description="User activities")
    total_activities: int = Field(..., description="Total number of activities")
    unique_users: int = Field(..., description="Number of unique users")
    period: str = Field(..., description="Analysis period")
    summary: Dict[str, Any] = Field(..., description="Activity summary")

# Document Statistics Models
class DocumentCategoryStats(BaseModel):
    category: str = Field(..., description="Document category")
    count: int = Field(..., description="Number of documents")
    total_size: int = Field(..., description="Total size in bytes")
    avg_size: float = Field(..., description="Average size in bytes")
    last_updated: datetime = Field(..., description="Last update timestamp")

class DocumentStatsResponse(BaseModel):
    total_documents: int = Field(..., description="Total number of documents")
    total_size: int = Field(..., description="Total size in bytes")
    categories: List[DocumentCategoryStats] = Field(..., description="Statistics by category")
    recent_uploads: int = Field(..., description="Documents uploaded in last 30 days")
    popular_tags: List[Dict[str, Any]] = Field(..., description="Most used tags")
    storage_usage: Dict[str, Any] = Field(..., description="Storage usage statistics")

# Compliance Models
class ComplianceMetric(BaseModel):
    metric_name: str = Field(..., description="Compliance metric name")
    value: float = Field(..., description="Metric value")
    target: float = Field(..., description="Target value")
    status: ComplianceStatus = Field(..., description="Compliance status")
    last_checked: datetime = Field(..., description="Last check timestamp")

class ComplianceReportResponse(BaseModel):
    report_id: str = Field(..., description="Report ID")
    report_type: str = Field(..., description="Report type")
    generated_at: datetime = Field(..., description="Generation timestamp")
    generated_by: str = Field(..., description="Generated by user ID")
    period: str = Field(..., description="Report period")
    metrics: List[ComplianceMetric] = Field(..., description="Compliance metrics")
    summary: Dict[str, Any] = Field(..., description="Report summary")
    recommendations: List[str] = Field(..., description="Recommendations")
    format: str = Field(..., description="Report format")
    download_url: Optional[str] = Field(None, description="Download URL")

# Risk Assessment Models
class RiskFactor(BaseModel):
    factor_name: str = Field(..., description="Risk factor name")
    risk_level: RiskLevel = Field(..., description="Risk level")
    probability: float = Field(..., description="Probability (0-1)")
    impact: float = Field(..., description="Impact score (0-1)")
    risk_score: float = Field(..., description="Calculated risk score")
    description: str = Field(..., description="Risk description")
    mitigation: Optional[str] = Field(None, description="Mitigation strategy")

class RiskAssessmentResponse(BaseModel):
    assessment_id: str = Field(..., description="Assessment ID")
    assessment_date: datetime = Field(..., description="Assessment date")
    overall_risk_level: RiskLevel = Field(..., description="Overall risk level")
    risk_factors: List[RiskFactor] = Field(..., description="Risk factors")
    total_risk_score: float = Field(..., description="Total risk score")
    recommendations: List[str] = Field(..., description="Risk mitigation recommendations")
    next_assessment_date: datetime = Field(..., description="Next assessment date")

# Trend Analysis Models
class TrendPoint(BaseModel):
    timestamp: datetime = Field(..., description="Data point timestamp")
    value: float = Field(..., description="Metric value")
    change: Optional[float] = Field(None, description="Change from previous point")

class TrendAnalysis(BaseModel):
    metric: str = Field(..., description="Analyzed metric")
    period: TimePeriod = Field(..., description="Time period")
    data_points: List[TrendPoint] = Field(..., description="Trend data points")
    trend_direction: str = Field(..., description="Trend direction")
    growth_rate: float = Field(..., description="Growth rate percentage")
    forecast: Optional[List[TrendPoint]] = Field(None, description="Forecasted values")

# Real-time Metrics Models
class RealTimeMetric(BaseModel):
    metric_name: str = Field(..., description="Metric name")
    current_value: float = Field(..., description="Current value")
    previous_value: float = Field(..., description="Previous value")
    change_percent: float = Field(..., description="Percentage change")
    trend: str = Field(..., description="Trend direction")
    last_updated: datetime = Field(..., description="Last update timestamp")

class RealTimeMetricsResponse(BaseModel):
    metrics: List[RealTimeMetric] = Field(..., description="Real-time metrics")
    system_status: Dict[str, Any] = Field(..., description="System status")
    active_users: int = Field(..., description="Number of active users")
    server_load: Dict[str, Any] = Field(..., description="Server load information")

# Report Models
class ReportMetadata(BaseModel):
    report_id: str = Field(..., description="Report ID")
    report_type: str = Field(..., description="Report type")
    title: str = Field(..., description="Report title")
    description: str = Field(..., description="Report description")
    generated_at: datetime = Field(..., description="Generation timestamp")
    generated_by: str = Field(..., description="Generated by user ID")
    format: str = Field(..., description="Report format")
    file_size: Optional[int] = Field(None, description="File size in bytes")
    download_url: Optional[str] = Field(None, description="Download URL")
    expires_at: Optional[datetime] = Field(None, description="Expiration timestamp")

class ReportRequest(BaseModel):
    report_type: str = Field(..., description="Type of report to generate")
    parameters: Dict[str, Any] = Field(default_factory=dict, description="Report parameters")
    format: str = Field("json", description="Output format")
    include_charts: bool = Field(True, description="Include charts in report")
    include_recommendations: bool = Field(True, description="Include recommendations")

# Analytics Query Models
class AnalyticsQuery(BaseModel):
    metric: MetricType = Field(..., description="Metric to analyze")
    period: TimePeriod = Field(..., description="Time period")
    start_date: Optional[datetime] = Field(None, description="Start date")
    end_date: Optional[datetime] = Field(None, description="End date")
    filters: Optional[Dict[str, Any]] = Field(None, description="Query filters")
    group_by: Optional[List[str]] = Field(None, description="Group by fields")
    limit: int = Field(100, description="Maximum number of results")

class AnalyticsResult(BaseModel):
    query: AnalyticsQuery = Field(..., description="Original query")
    results: List[Dict[str, Any]] = Field(..., description="Query results")
    total_count: int = Field(..., description="Total number of results")
    execution_time: float = Field(..., description="Query execution time")
    cached: bool = Field(False, description="Whether result was cached")

# Performance Models
class PerformanceMetric(BaseModel):
    endpoint: str = Field(..., description="API endpoint")
    method: str = Field(..., description="HTTP method")
    avg_response_time: float = Field(..., description="Average response time")
    p95_response_time: float = Field(..., description="95th percentile response time")
    request_count: int = Field(..., description="Number of requests")
    error_rate: float = Field(..., description="Error rate percentage")
    last_updated: datetime = Field(..., description="Last update timestamp")

class PerformanceSummary(BaseModel):
    metrics: List[PerformanceMetric] = Field(..., description="Performance metrics")
    overall_health: str = Field(..., description="Overall system health")
    slowest_endpoints: List[str] = Field(..., description="Slowest endpoints")
    recommendations: List[str] = Field(..., description="Performance recommendations")
